#
calculate the exponent of a to the power of b.
%%
%
calculate a modulus b.
%%
+
Adds all arguments present to the first number.
%%
-
Subtracts all arguments present from the first number.
%%
*
Multiplies all arguments present with the first number.
%%
/
Divides all arguments present with the first number.
%%
/=
Numerical inequality testing.   If any argument is identical
to any other argument return false.  Otherwise return true.
%%
<

Return true if a is less than b.
%%
=
returns true if the numerical values supplied are all equal to each other.

Note that multiple values may be specified, so it is possible to compare
three, or more, values as per the second example below.

See also: char=, eq, string=
Example : (print (= 3 a))
Example : (print (= 3 a b))
%%
abs
Return the absolute value of the supplied number.
asin

%%
arch
arch returns a simple string describing the architecture the current host is running upon.

See also: (os)
Example : (print (arch))
%%
base

Convert the given number into a string representation in the specified base.

See also: number, sprintf, str

Example: (print (base 255 2))  ; base two is binary
Example: (print (base 255 16)) ; base 16 is hexadecimal
%%
body

Return the body of a function implemented in lisp.

See also: help, source

Example: (print (body inc))
%%
builtins

Return a list of all functions builtin to our golang interpreter.  This
includes only the functions implemented in golang, excluding the specials.

See also: specials, stdlib
%%
car
car returns the first item from the specified list.
%%
cdr
cdr returns all items from the specified list, except the first.
%%
char=

char= returns true if the supplied parameters were characters, and were equal.

See also: = char< string=
%%
char<

char< returns true if the first character is "less than" the second character.

See also: < char=
%%
chr
chr returns a string containing the single character who's ASCII code was provided.

See also: ord
Example : (chr 42) ; => "*"
%%
cons

cons adds a to the start of the list b, which might be empty.
%%
contains?

contains? returns true if the hash specified as the first argument contains the key specified as the second argument.
%%
date

date returns a list containing date-related fields; the day of the week, the day-number, the month-number, and the year.

See also: (time)
%%
directory?

Return true if the specified path exists, and is a directory.

See also: exists? file?
Example: (print (directory? "/etc"))

%%
directory:entries

directory:entries returns the names of all files/directories beneath the given
path, recursively.  It is a helper function used to implement directory:walk

See also: directory:walk, glob
%%
env

env returns all the registered symbols from the environment, as a list of hashes.
%%
eq

eq returns true if the two values supplied as parameters have the same type, and string representation.

See also: =
Example: (print (eq "bob" 2))
%%
error

error raises an error with the specified message as the detail.

Example: (error "Expected foo to be bar!")
%%
exists?

exists? returns true if the specified path exists, regardless of the type of path

See also: directory? file?
Example: (print (exists? "/etc"))
%%
explode

explode converts the specified string into a list of characters.

See also: join,split
Example: (print (explode "foo bar"))
%%
file?

file? returns true if the specified path exists, and is a file.

More specifically something is regarded as a file if it is NOT a directory.

See also: directory? exists?
Example: (print (file? "/dev/null"))
%%
file:lines

file:lines returns the contents of the given file, as a list of lines.

See also: file:read, file:write
%%
file:read

file:read returns the contents of the given file, as a string.

See also: file:lines, file:write
%%
file:stat

file:stat returns a list containing details of the given file/directory,
or an error if it couldn't be found.

The return value is (NAME SIZE UID GID MODE).

See also: file:stat:gid file:stat:mode file:stat:size file:stat:uid
Example: (print (file:stat "/etc/passwd"))
%%
file:write

Write the given content to the specified path.

Example: (file:write "/tmp/test.txt" "I like cake.")
%%
gensym

gensym returns a symbol which is guaranteed to be unique.  It is primarily
useful for macros.
%%
get

get returns the specified field from the specified hash.

See also: set
Example: (get {:name "steve" :location "Europe" } ":name")
%%
glob

glob returns files matching the given pattern, as a list.

See also: directory:entries directory:walk
Example: (print (glob "/etc/p*"))
%%
help

help returns any help associated with the item specified as the single argument.

See also: body, source
Example: (print (help print))
%%
join

join returns a string formed by converting every element of the supplied
list into a string and concatenating the results.  An optional second
parameter will be inserted between the list entries.

Example: (print (join (list 192 168 1 1) ".")) ; "192.168.1.1"

See also: explode, split
%%
keys

keys returns the keys which are present in the specified hash.

NOTE: Keys are returned in sorted order.

See also: vals
%%
list

list creates and returns a list containing each of the specified arguments, in order.
%%
match

match is used to perform regular expression matches.  The first parameter must be a suitable regular expression, supplied in string-form, and the second should be a value to test against.  If the second value is not a string it will be stringified prior to the test-attempt.

Any matches found will be returned as a list, with nil being returned on no match.

Example: (print (match "c.ke$" "cake"))
%%
md5

md5 returns the calculated MD5 digest of the provived string

See also: sha1, sha256

Example: (print (md5 "steve"))
%%
ms

ms returns the current time as a number of milliseconds, it is useful for benchmarking.

See also: now
%%
nil?

nil? returns true if the given parameter is nil, or an empty list.
%%
now

now returns the number of seconds since the Unix Epoch.

See also: ms
%%
nth

nth returns an item from the specified list, at the given offset.

NOTE: The offset starts from 0, to access the first item.

Example: (print (nth '( 1 2 3 ) 0 ) )
%%
number

Number will convert the given string to a number object, and supports
hexadecimal, binary, and base-ten values.

Example: (print (number "0xffed"))
Example: (print (number "0b1011"))

See also: base, str
%%
ord

ord returns the ASCII code for the character provided as the first input.

See also: chr
Example: (ord "a") ; => 97
Example: (ord \#*) ; => 42
%%
os

os returns a simple string describing the operating system the current host is running.

See also: (arch)
Example: (print (os))
%%
print

print is used to output text to the console.  It can be called with either an object/string to print, or a format-string and list of parameters.

When a format string is used it can contain the following strings:

%c -> output a character value.
%d -> output an integer.
%f -> output a floating-point number.
%s -> output a string.
%t -> output a boolean value.

See also: sprintf
Example: (print "Hello, world")
Example: (print "Hello user %s you are %d" (getenv "USER") 32)
%%
random

random will return a number between zero and one less than the value specified.

See also: random:char random:item
Example: (random 100) ; A number between 0 and 99
%%
set

set updates the specified hash, setting the value given by name.

See also: get

Example: (set! person {:name "Steve"})
         (set person :name "Bobby")
%%
sha1

sha1 returns the calculated SHA1 digest of the provived string

See also: md5sum, sha256

Example: (print (sha1 "steve"))
%%
sha256

sha256 returns the calculated SHA256 digest of the provived string

See also: md5sum, sha1

Example: (print (sha256 "steve"))
%%
shell

shell allows you to run a command, via the shell.

The return value is a list of two entries - the first is STDOUT, the second is STDERR.

Example: (print (car (shell '("ls" "-l" "-a")))
Example: (print (cdr (shell '("ls" "/this /path /does - not EXIST!"))))
%%
slurp

slurp returns the contents of the specified file.
%%
sort

sort will sort the items in the list specified as the single argument, and return them as a new list.

Note that the sort is naive; numbers will be sorted correctly, any other type
will be converted to a string and sorted that way.  If you want more flexibility
see also sort-by.

Example: (print (sort 3 43  1 "Steve" "Adam"))
%%
source

source will output the source of the given (lisp) function.

See also: body, help

Example: (print (source random:char))
%%
specials

Return a list of all functions which are implemented within our golang
interpreter, as special forms, in golang.

See-also: builtins, stdlib
%%
split

split accepts two string parameters, and splits the first string by the term specified as the second argument, returning a list of the results.

See also: explode, join
Example: (split "steve" "e") ; => ("st" "v")
Example: (split "steve" "")  ; => ("s" "t" "e" "v" "e")
%%
sprintf

sprintf allows formating values with a simple format-string.

When a format string is used it can contain the following strings:

%c -> output a character value.
%d -> output an integer.
%f -> output a floating-point number.
%s -> output a string.
%t -> output a boolean value.

See also: print
Example: (sprintf "Today is %s" (weekday))
Example: (sprintf "31 in binary is %08b" 31)
%%
str

str converts the parameter supplied to a string, and returns it.

Example: (print (str 3))
See also: base, number
%%
string=

string= returns true if the supplied parameters were both strings, and have equal values.

See also: = char= string<
%%
string<

string< returns true if the supplied parameters were both strings, and the first is less than the second.

See also: < char< string=
%%
time

time returns a list containing time-related entries; the current hour, the current minute past the hour, and the current value of the seconds.

See also: (date)
%%
type

type returns a string describing the type of the specified object.

Example:  (print (type "string"))
          (print (type 3))

%%
vals

valus returns the values which are present in the specified hash.

NOTE: Values are returned in the order of their sorted keys.

See also: keys
%%
